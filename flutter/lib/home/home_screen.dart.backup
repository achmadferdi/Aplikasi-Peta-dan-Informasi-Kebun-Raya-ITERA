import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:ridikc_crud/config/color.dart';
import 'package:ridikc_crud/config/config_global.dart';
import 'package:ridikc_crud/config/config_session_manager.dart';
import 'package:ridikc_crud/data/data_filter.dart';
import 'package:ridikc_crud/data_katalog/bloc/data_katalog_bloc.dart';
import 'package:ridikc_crud/data_katalog/bloc/data_katalog_event.dart';
import 'package:ridikc_crud/data_katalog/bloc/data_katalog_state.dart';
import 'package:ridikc_crud/data_katalog/data/data_katalog_apidata.dart';
import 'package:ridikc_crud/data_katalog/data_katalog_screen.dart';
import 'package:ridikc_crud/data_katalog/data_katalog_tampil.dart';
import 'package:ridikc_crud/data_lokasi/data/data_lokasi_apidata.dart';
import 'package:ridikc_crud/home/ekatalog.dart';
import 'package:ridikc_crud/home/grid_dashboard.dart';
import 'package:ridikc_crud/home/home_app.dart';
import 'package:ridikc_crud/home/judul_ekatalog.dart';
import 'package:ridikc_crud/home/judul_informasi_layanan.dart';
import 'package:ridikc_crud/home/pencarian.dart';
import 'package:ridikc_crud/login/login_screen.dart';
import 'package:ridikc_crud/profil/profil_screen.dart';
import 'package:ridikc_crud/widgets/google_map_widget.dart';
import 'package:ridikc_crud/widgets/loading_widget.dart';
import 'package:ridikc_crud/widgets/slider_widget.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:shimmer/shimmer.dart';

class HomeScreen extends StatefulWidget {
  static const routeName = '/';

  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  var scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    BlocProvider.of<DataKatalogBloc>(context)
        .add(const FetchDataKatalog(DataFilter()));
  }

  @override
  Widget build(BuildContext context) {
    cekLogin();
    return Scaffold(
      key: scaffoldKey,
      /* appBar: MyAppBar(), */
      drawerEnableOpenDragGesture: false,
      // drawer: const MyDrawer(),
      body: Stack(
        children: [
          
          GoogleMapWidget(),
          // ListView(
          //   physics: const NeverScrollableScrollPhysics(),
          //   shrinkWrap: true,
          //   children: [
          //     HomeApp(scaffoldKey: scaffoldKey),
          //     const SizedBox(height: 20),
          //     const Pencarian(),
          //     const SizedBox(height: 20),
          //     CarouselSlider(
          //       options: CarouselOptions(
          //         height: 100.0,
          //         autoPlay: true,
          //         aspectRatio: 16 / 9,
          //         autoPlayInterval: const Duration(seconds: 3),
          //         autoPlayAnimationDuration:
          //             const Duration(milliseconds: 800),
          //         autoPlayCurve: Curves.fastOutSlowIn,
          //         enlargeCenterPage: true,
          //       ),
          //       items: getSliderWidgets().map((i) {
          //         return Builder(
          //           builder: (BuildContext context) {
          //             return SliderWidget(card: i);
          //           },
          //         );
          //       }).toList(),
          //     ),
          //     const SizedBox(height: 10),
          //     const JudulInformasiLayanan(),
          //     const SizedBox(height: 10),
          //     const GridDashboard(),
          //     const SizedBox(height: 10),
          //     const JudulEkatalog(),
          //     BlocListener(
          //       bloc: BlocProvider.of<DataKatalogBloc>(context),
          //       listener: (context, state) {},
          //       child: BlocBuilder<DataKatalogBloc, DataKatalogState>(
          //         builder: ((context, state) {
          //           // if (state is DataKatalogLoading) {
          //           // }
          //           if (state is DataKatalogLoadSuccess) {
          //             List<DataLokasiApiData> data = state.data.result;
          //             return SizedBox(
          //               height: 250,
          //               child: Padding(
          //                 padding: const EdgeInsets.all(10),
          //                 child: ListView.builder(
          //                   scrollDirection: Axis.horizontal,
          //                   shrinkWrap: true,
          //                   itemCount: data.length,
          //                   itemBuilder: (context, index) {
          //                     return Ekatalog(data: data[index]);
          //                   },
          //                 ),
          //               ),
          //             );
          //           }
          //           // if (state is DataKatalogLoadFailure) {
          //           //   return Text('Error ${state.pesan}');
          //           // }
          //           // if (state is DataKatalogNoInternet) {
          //           //   return const NoInternetWidget();
          //           // }
          //           // return const Text('Preparing');
          //           // return Shimmer.fromColors(
          //           //   baseColor: Colors.grey[400]!,
          //           //   highlightColor: Colors.green[100]!,
          //           //   child: ,
          //           // );
          //           return Stack(
          //             children: [
          //               SizedBox(
          //                 height: 250,
          //                 child: Padding(
          //                   padding: const EdgeInsets.all(10),
          //                   child: ListView.builder(
          //                     scrollDirection: Axis.horizontal,
          //                     shrinkWrap: true,
          //                     itemCount: 3,
          //                     itemBuilder: (context, index) {
          //                       return Card(
          //                         elevation: 1.0,
          //                         shape: RoundedRectangleBorder(
          //                           borderRadius: BorderRadius.circular(16),
          //                         ),
          //                         child: Column(
          //                           children: [
          //                             Shimmer.fromColors(
          //                               enabled: state is DataKatalogLoading,
          //                               baseColor: Colors.white,
          //                               highlightColor: Colors.grey,
          //                               child: Container(
          //                                 decoration: const BoxDecoration(
          //                                   borderRadius: BorderRadius.only(
          //                                     topLeft: Radius.circular(16),
          //                                     topRight: Radius.circular(16),
          //                                   ),
          //                                   color: Colors.white,
          //                                 ),
          //                                 height: 170,
          //                                 width: 180,
          //                               ),
          //                             ),
          //                             const SizedBox(height: 6),
          //                             Shimmer.fromColors(
          //                               enabled: state is DataKatalogLoading,
          //                               baseColor: Colors.white,
          //                               highlightColor: Colors.grey,
          //                               child: Container(
          //                                 decoration: const BoxDecoration(
          //                                   // borderRadius:
          //                                   //     BorderRadius.circular(16),
          //                                   color: Colors.white,
          //                                 ),
          //                                 height: 20,
          //                                 width: 180,
          //                               ),
          //                             ),
          //                             const SizedBox(height: 6),
          //                             Shimmer.fromColors(
          //                               enabled: state is DataKatalogLoading,
          //                               baseColor: Colors.white,
          //                               highlightColor: Colors.grey,
          //                               child: Container(
          //                                 decoration: const BoxDecoration(
          //                                   borderRadius: BorderRadius.only(
          //                                     bottomLeft: Radius.circular(16),
          //                                     bottomRight:
          //                                         Radius.circular(16),
          //                                   ),
          //                                   color: Colors.white,
          //                                 ),
          //                                 height: 20,
          //                                 width: 180,
          //                               ),
          //                             )
          //                           ],
          //                         ),
          //                       );
          //                     },
          //                   ),
          //                 ),
          //               ),
          //               if (state is DataKatalogLoadFailure)
          //                 Positioned(
          //                   bottom: 100,
          //                   left: 50,
          //                   child: Row(
          //                     mainAxisSize: MainAxisSize.max,
          //                     mainAxisAlignment: MainAxisAlignment.center,
          //                     children: [
          //                       ElevatedButton(
          //                         onPressed: () {
          //                           BlocProvider.of<DataKatalogBloc>(context)
          //                               .add(const FetchDataKatalog(
          //                                   DataFilter()));
          //                         },
          //                         style: ButtonStyle(
          //                             backgroundColor:
          //                                 MaterialStateProperty.all<Color>(
          //                                     Style.buttonBackgroundColor)),
          //                         child: const Text("Coba lagi !"),
          //                       )
          //                     ],
          //                   ),
          //                 ),
          //             ],
          //           );
          //         }),
          //       ),
          //     ),
          //   ],
          // ),
          // BlocBuilder<DataKatalogBloc, DataKatalogState>(
          //     builder: (context, state) {
          //   }
          //   return Text("");
          // }),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.account_circle),
            label: 'Profil',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.alarm_add),
            label: 'Panic',
          ),
          // BottomNavigationBarItem(
          //   icon: Icon(Icons.date_range),
          //   label: 'Jadwal',
          // ),
          // BottomNavigationBarItem(
          //   icon: Icon(Icons.receipt_long),
          //   label: 'Transaksi',
          // ),
          BottomNavigationBarItem(
            icon: Icon(Icons.share_location),
            label: 'Share Location',
          ),
        ],
        currentIndex: 0,
        selectedItemColor: Style.buttonBackgroundColor,
        onTap: ((value) {
          if (value == 0) {
            Navigator.of(context).pushNamed(ProfilScreen.routeName);
            return;
          }
        }),
        unselectedItemColor: Colors.grey,
        showUnselectedLabels: true,
      ),
    );
  }

  void cekLogin() async {
    if (!ConfigGlobal.login) return;
    final session = ConfigSessionManager.getInstance();
    final sudahLogin = await session.sudahLogin();
    if (sudahLogin) return;
    if (!mounted) return;
    Navigator.pushReplacementNamed(context, LoginScreen.routeName);
  }
}

const double baseHeight = 650.0;

double screenAwareSize(double size, BuildContext context) {
  return size * MediaQuery.of(context).size.height / baseHeight;
}
